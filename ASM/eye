import numpy as np
import cv2
import matplotlib.pyplot as plt

def create_eye_image():
    """Create a simple synthetic eye image"""
    image = np.zeros((100, 200), dtype=np.uint8)
    
    # Draw eye white
    cv2.ellipse(image, (100, 50), (30, 15), 0, 0, 360, 255, -1)
    
    # Draw iris
    cv2.circle(image, (100, 50), 10, 100, -1)
    
    # Add some noise
    noise = np.random.normal(0, 5, image.shape).astype(np.uint8)
    image = cv2.add(image, noise)
    
    return image

def find_better_positions(image, points, window_size=10):
    """Find better positions for points based on edge strength"""
    better_points = []
    
    # Calculate image gradients
    grad_x = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)
    grad_y = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)
    magnitude = np.sqrt(grad_x**2 + grad_y**2)
    
    for x, y in points:
        # Convert to integers
        x, y = int(x), int(y)
        
        # Define search window
        x_start = max(0, x - window_size)
        x_end = min(image.shape[1], x + window_size + 1)
        y_start = max(0, y - window_size)
        y_end = min(image.shape[0], y + window_size + 1)
        
        # Get window of gradient magnitude
        window = magnitude[y_start:y_end, x_start:x_end]
        
        # Find strongest edge
        y_local, x_local = np.unravel_index(window.argmax(), window.shape)
        
        # Convert back to image coordinates
        better_x = x_start + x_local
        better_y = y_start + y_local
        
        better_points.append([better_x, better_y])
    
    return np.array(better_points)

def main():
    # Create test image
    image = create_eye_image()
    
    # Initial wrong points
    initial_points = np.array([
        [70, 50],   # Left corner
        [130, 50]   # Right corner
    ])
    
    # Find better positions
    better_points = find_better_positions(image, initial_points)
    
    # Visualize
    plt.figure(figsize=(12, 4))
    
    # Original image with initial points
    plt.subplot(131)
    plt.imshow(image, cmap='gray')
    plt.plot(initial_points[:, 0], initial_points[:, 1], 'r.', markersize=15, label='Initial')
    plt.title('Initial Points')
    plt.legend()
    
    # Edge strength
    plt.subplot(132)
    grad_x = cv2.Sobel(image, cv2.CV_64F, 1, 0, ksize=3)
    grad_y = cv2.Sobel(image, cv2.CV_64F, 0, 1, ksize=3)
    magnitude = np.sqrt(grad_x**2 + grad_y**2)
    plt.imshow(magnitude, cmap='jet')
    plt.title('Edge Strength')
    
    # Result
    plt.subplot(133)
    plt.imshow(image, cmap='gray')
    plt.plot(initial_points[:, 0], initial_points[:, 1], 'r.', markersize=15, label='Initial')
    plt.plot(better_points[:, 0], better_points[:, 1], 'g.', markersize=15, label='Better')
    # Draw arrows
    for init, better in zip(initial_points, better_points):
        plt.arrow(init[0], init[1], 
                 better[0]-init[0], better[1]-init[1], 
                 color='yellow', width=0.5)
    plt.title('Points Movement')
    plt.legend()
    
    plt.tight_layout()
    plt.show()
    
    print("\nWhat happened:")
    print("1. Red dots: Initial wrong positions")
    print("2. Green dots: Found better positions")
    print("3. Yellow arrows: How points moved")

if __name__ == "__main__":
    main()